#!/usr/bin/python
# pylint: disable=locally-disabled, line-too-long, invalid-name

import argparse
import logging
import json
import os
import re
import shutil
import subprocess
import sys
import tempfile

from pprint import pprint
from time import gmtime, strftime

BREW_BIN = '/usr/local/bin/brew'
SANTA_BIN = '/Library/Extensions/santa-driver.kext/Contents/MacOS/santactl'
INSTALL_LOCATION = '/usr/local'

# Some additional items which are erroneously not listed in `brew ls --unbrewed`
PKG_FILTERS = [
    'bin/santactl',
    'bin/osqueryctl',
    'bin/osqueryd',
    'bin/osqueryi',
    'bin/autopkg',
    'remotedesktop/RemoteDesktopChangeClientSettings.pkg',
    'var', # exclude all of var to see what breaks
    'Library',
    'zentral',
]

log = logging.getLogger('brew-stew')

def cmd_output(cmd, explicit_cmd=False, env=None):
    '''Run a brew command passed as a list, returns (stdout, stderr)
    env can optionally augment the environment passed to the process,
    returns a 3-item tuple of (stdout, stderr, exitcode). env can
    augmenet the default environment.'''
    send_cmd = [BREW_BIN] + cmd
    if explicit_cmd:
        send_cmd = cmd
    new_env = os.environ.copy()
    new_env['HOMEBREW_NO_AUTO_UPDATE'] = '1'
    if env:
        new_env.update(env)
    log.debug("%s", ' '.join(send_cmd))
    proc = subprocess.Popen(send_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                            env=new_env)
    out, err = proc.communicate()
    return (out.strip(), err, proc.returncode)

def cmd_call(cmd, explicit_cmd=False, env=None):
    '''Just subprocess.calls the list of args to the `brew` command,
    returns only the process's returncode. env can augmenet the default
    environment.'''
    send_cmd = [BREW_BIN] + cmd
    if explicit_cmd:
        send_cmd = cmd
    new_env = os.environ.copy()
    new_env['HOMEBREW_NO_AUTO_UPDATE'] = '1'
    if env:
        new_env.update(env)
    log.debug("%s", ' '.join(send_cmd))
    retcode = subprocess.call(send_cmd, env=new_env)
    return retcode

def list_files(root, include_dirs=True):
    '''Returns a list of files (and optionall dirs) at a given root. Useful
    for feeding to stage_files().'''
    file_list = []
    for root, dirs, files in os.walk(root):
        if include_dirs:
            for d in dirs:
                file_list.append(os.path.join(root, d))
        for f in files:
            file_list.append(os.path.join(root, f))
    return file_list

def stage_files(source_file_list, pkgroot, opts=['-a']):
    file_list_path = tempfile.mkstemp()[1]
    with open(file_list_path, 'w') as fd:
        fd.write('\n'.join(source_file_list))
    rsync_cmd = ['/usr/bin/rsync'] + opts
    rsync_cmd += ['--files-from', file_list_path, '/', pkgroot]
    cmd_call(rsync_cmd, explicit_cmd=True)

class BrewStewEnv(object):
    def __init__(self, brew_file, output_dir):
        cmd_call(['analytics', 'off'])

        self.brew_list = []
        for line in open(brew_file, 'r').read().splitlines():
            if line.startswith("#"):
                continue
            self.brew_list.append(line)
        self.output_dir = output_dir

        self.installed_json = []
        self.installed_formulae = []
        self._update_installed()

        self.non_homebrew_files = []
        self._update_unbrewed()

        self.prefix, _, _ = cmd_output(['--prefix'])
        self.cellar, _, _ = cmd_output(['--cellar'])
        self.filtered_pkg_files = []

        self.pkg_version = strftime('%Y.%m.%d', gmtime())
        self.built_pkg_path = os.path.join(self.output_dir, 'brew-stew-%s.pkg' % self.pkg_version)

    def _update_installed(self):
        installed = []
        info_json, _, _ = cmd_output(['info', '--json=v1', '--installed'])
        self.installed_json = json.loads(info_json)
        for f in self.installed_json:
            installed.append((f['name'], f['installed'][0]['version']))
            if len(f['installed']) > 1:
                log.error("WARNING: Formula %s has more than one version installed, unexpected", f['name'])
        self.installed_formulae = installed

    def _update_unbrewed(self):
        proc = subprocess.Popen([BREW_BIN, 'ls', '--unbrewed'], stdout=subprocess.PIPE)
        out, _ = proc.communicate()
        for line in out.splitlines():
            self.non_homebrew_files.append(line)

    def brew_outdated(self):
        cmd_call(['outdated', '--json=v1']) # print for debugging

    def brew_update(self):
        cmd_call(['update'])

    def brew_upgrade(self):
        cmd_call(['upgrade'])

    def brew_install(self):
        log.info("Beginning brew install of formulae: %s", ', '.join(self.brew_list))
        for brew in self.brew_list:
            cmd_call(['install', brew])
        self._update_installed()
        self._update_unbrewed()

    def brew_test(self):
        for brew in self.brew_list:
            cmd_call(['test', brew])

    def cleanroom(self):
        if self.installed_formulae:
            rm_cmd = ['rm', '--force', '--ignore-dependencies']
            rm_cmd.extend([f for (f, _) in self.installed_formulae])
            cmd_call(rm_cmd)
        cmd_call(['cleanup'])

    def build_pkg(self, strategy='additive'):
        pkgbuild_cmd = ['/usr/bin/pkgbuild', '--install-location', INSTALL_LOCATION, '--identifier', 'org.brew-stew.pkg', '--version', self.pkg_version]

        log.info("Initiating pkg build using '%s' strategy", strategy)
        if strategy == 'subtractive':
            pkgbuild_cmd += ['--root', self.prefix]
            # except we get warnings for these files, presumably because of the ++:
            # WARNING **** Can't compile pattern: share/mime/text/x-c++src.xml
            self.filtered_pkg_files += self.non_homebrew_files
            self.filtered_pkg_files += PKG_FILTERS
            self.filtered_pkg_files += [
                '.DS_Store',
                '.git',
                'Homebrew', # brew core git repos
                'bin/brew', # brew CLI binstub
            ]
            for pattern in self.filtered_pkg_files:
                pkgbuild_cmd += ['--filter', pattern]
            pkgbuild_cmd += [self.built_pkg_path]


        if strategy == 'additive':
            pkgroot = tempfile.mkdtemp()
            # TODO: derive this from a variable/const
            pkgbuild_cmd += ['--root', os.path.join(pkgroot, 'usr/local')]

            file_list = cmd_output(['ls', '--verbose'] + [name for (name, _) in self.installed_formulae])[0].splitlines()
            stage_files(file_list, pkgroot)

            # recursively walk the brew prefix to find links of interest, according to this criteria,
            # in this order:
            # - path of the symlink isn't excluded by exclude_re
            # - the target of the symlink matches include_re - note that the
            #   targets are often relative ('../Cellar/..') but not always; npm
            #   is a symlink to '/usr/local/lib/node_modules/npm/bin/npm-cli.js' for example,
            #   so adding other paths to include_re is a TODO
            #
            # TODO:
            # - could there still be anything here that's stale, i.e. from a
            #   previous formula that's no longer in our install list? if so,
            #   we could probably also add a check that any included item has
            #   to contain a path like 'Cellar/<formula>' so that we can count
            #   on it being relevant
            exclude_re = r'^\/usr\/local\/(bin\/brew|Homebrew).*$'
            include_re = r'^(\/usr\/local\/lib.*|.*Cellar).*$'
            symlinks = []
            log.info("Locating symlinks in Homebrew directory")
            for root, _, files in os.walk(INSTALL_LOCATION):
                if re.match(exclude_re, root):
                    continue
                for f in files:
                    full_spath = os.path.join(root, f)
                    if os.path.islink(full_spath):
                        if not re.match(include_re, os.path.realpath(full_spath)):
                            continue
                        linked_path = os.readlink(full_spath)
                        log.debug("Got link '%s'  -->  '%s'", full_spath, linked_path)
                        symlinks.append(full_spath)
            log.info("Staging symlinks")
            stage_files(symlinks, pkgroot)

            additional_stage_dirs = ['opt', 'var']
            for add_dir in additional_stage_dirs:
                log.info("Staging additional dir in pkg: '%s'", add_dir)
                files_to_add = list_files(os.path.join('/usr/local', add_dir))
                stage_files(files_to_add, pkgroot)

        log.debug("Calling pkgbuild command: %s", pkgbuild_cmd)
        pkgbuild_cmd.append(self.built_pkg_path)
        subprocess.call(pkgbuild_cmd)

        log.debug("Cleaning up temp root dir at %s", pkgroot)
        shutil.rmtree(pkgroot)

    def dump_pkg_files(self):
        subprocess.call(['/usr/sbin/pkgutil', '--payload-files', self.built_pkg_path])

    def build_report(self):
        '''Write a report.json from this package run out to the current directory'''
        report = {}
        # summary will contain a simple dictionary of formulae with versions for ease
        # of parsing
        report['summary'] = {}
        report['summary']['formulae'] = []

        report['formulae'] = []
        for formula in self.brew_list:
            log.debug("Gathering report for formula '%s'", formula)
            # Every item in self.brew_list may not have actually installed successfully,
            # so first make sure we've got a matching entry from `brew info --installed`
            #
            # TODO: see if we can't just instead use `self.installed_formulae` for this..
            try:
                brew_info = [item for item in self.installed_json if item['name'] == formula][0]
            except IndexError:
                continue

            f = {}
            f['name'] = formula
            # Direct output of `brew info --json=v1`
            f['brew_info'] = brew_info
            # I don't know when 'installed' _wouldn't_ be present, but let's be
            # cautious anyway
            if f['brew_info'].get('installed'):
                report['summary']['formulae'].append(
                    {'name': f['name'],
                     'version': f['brew_info']['installed'][0]['version'],
                    })
            else:
                log.warning("WARNING: unexpected missing 'installed' dictionary in brew info for formula '%s'", formula)

            # Direct output of `santactl fileinfo --json` for all binaries in this
            # formula's cellar
            f['santa_info'] = []
            # find any executables with this formula's Cellar location
            for root, _, files in os.walk(os.path.join(self.cellar, formula)):
                for phile in files:
                    full_path = os.path.join(root, phile)
                    if os.path.isfile(full_path) and os.access(full_path, os.X_OK):
                        santa_cmd = [
                            SANTA_BIN,
                            'fileinfo',
                            '--json',
                            full_path]
                        santa_out, santa_err, _ = cmd_output(santa_cmd, explicit_cmd=True)
                        # santactl doesn't output a non-zero exit code on an 'Invalid or empty file' error,
                        # so let's try scraping stderr
                        if santa_err:
                            log.warning("santactl error on executing %s: '%s' - santa output for this binary will be skipped",
                                        santa_cmd, santa_err)
                            continue
                        santa_json = dict(json.loads(santa_out))
                        f['santa_info'].append(santa_json)
            report['formulae'].append(f)

        with open(os.path.join(self.output_dir, 'report.json'), 'w') as fd:
            json.dump(report, fd, indent=2)

        # Dump report of additional reporting items:
        # - textfile with simple "formula version"
        versions_txt_path = os.path.join(self.output_dir, 'formula_versions.txt')
        with open(versions_txt_path, 'w') as fd:
            for formula, ver in self.installed_formulae:
                fd.write("%s %s\n" % (formula, ver))
        log.info("Wrote formula versions textfile to %s", versions_txt_path)

        # - full Bom output
        bom_report_path = os.path.join(self.output_dir, 'package_bom.txt')
        bom_tmp, _, _ = cmd_output(['/usr/sbin/pkgutil', '--bom', self.built_pkg_path],
                                   explicit_cmd=True)
        bom_out, _, _ = cmd_output(['/usr/bin/lsbom', bom_tmp], explicit_cmd=True)
        with open(bom_report_path, 'w') as fd:
            fd.write(bom_out)
        log.info("Write installer package BOM (bill of materials) output to %s", bom_report_path)

def main():
    desc = """Builds monolithic macOS installer packages from a Homebrew formula
install configuration. Given a list of formulae in a text file and an
output directory, it outputs a .pkg and several report files."""

    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument(
        'brew_list_file', type=str,
        help="Path to a file containing a list of formulae")
    parser.add_argument(
        'output_dir', type=str,
        help="Path to the output directory for all build files (NOT YET IMPLEMENTED)")
    parser.add_argument(
        '--verbose', '-v', action='count', default=0,
        help=("Increase output verbosity, currently can be specified only once"))
    args = parser.parse_args()
    if args.verbose > 1:
        sys.exit("Currently the --verbose option can only be specified once, enabling DEBUG-level output")
    if not os.path.exists(args.brew_list_file):
        sys.exit("brew list file %s is invalid or can't be found." % args.brew_list_file)
    if not os.path.exists(args.output_dir):
        os.makedirs(args.output_dir)
    if not os.path.exists(SANTA_BIN):
        sys.exit("brew-stew requires an installation of Google Santa on this "
                 "build machine for the purposes of generating reports. Please "
                 "install the latest Santa release package from "
                 "https://github.com/google/santa/releases and re-run.")

    # global logger needs the lowest debug log enabled, but then we may raise the stdout (StreamHandler)
    # handler back up according to user options. build_debug.log always uses DEBUG level.
    log.setLevel(logging.DEBUG)

    formatter = logging.Formatter('%(asctime)s [%(levelname)s] - (%(funcName)s): %(message)s')

    stream_handler = logging.StreamHandler(stream=sys.stdout)
    stream_handler.setLevel(logging.INFO - (10 * args.verbose))
    file_handler = logging.FileHandler(os.path.join(args.output_dir, 'build_debug.log'))
    file_handler.setLevel(logging.DEBUG)

    # set both stdout and file logging to use the same output format and attach to the
    # same global logger
    for handler in [stream_handler, file_handler]:
        handler.setFormatter(formatter)
        log.addHandler(handler)

    env = BrewStewEnv(args.brew_list_file, args.output_dir)
    env.cleanroom()
    env.brew_update()
    env.brew_install()
    env.brew_test()

    env.build_pkg()

    env.build_report()


if __name__ == '__main__':
    main()
